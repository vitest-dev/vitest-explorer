{
  "name": "vitest-explorer",
  "displayName": "Vitest",
  "version": "0.2.12",
  "description": "Run and debug Vitest test cases",
  "icon": "img/icon.png",
  "preview": true,
  "keywords": [
    "vitest",
    "test",
    "typescript",
    "javascript"
  ],
  "license": "MIT",
  "author": "zxch3n",
  "publisher": "ZixuanChen",
  "repository": {
    "type": "git",
    "url": "https://github.com/vitest-dev/vscode.git"
  },
  "bugs": {
    "url": "https://github.com/vitest-dev/vscode/issues"
  },
  "engines": {
    "vscode": "^1.63.0"
  },
  "categories": [
    "Testing"
  ],
  "activationEvents": [
    "onCommand:vitest-explorer.configureTest",
    "workspaceContains:**/vitest.config.*s",
    "workspaceContains:**/vite.config.*s"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "title": "Update Snapshot",
        "command": "vitest.updateSnapshot",
        "category": "Vitest"
      },
      {
        "title": "Start Watch Mode",
        "command": "vitest.startWatching",
        "category": "Vitest"
      },
      {
        "title": "Stop Watch Mode",
        "command": "vitest.stopWatching",
        "category": "Vitest"
      },
      {
        "title": "Toggle Watch Mode",
        "command": "vitest.toggleWatching",
        "category": "Vitest"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "vitest.updateSnapshot",
          "when": "false"
        },
        {
          "command": "vitest.startWatching",
          "when": "false"
        },
        {
          "command": "vitest.stopWatching",
          "when": "false"
        }
      ],
      "testing/item/context": [
        {
          "command": "vitest.updateSnapshot"
        }
      ]
    },
    "configuration": {
      "title": "Vitest",
      "properties": {
        "vitest.enable": {
          "description": "This plugin will try to detect whether the current project is set up with Vitest to activate itself. When it failed, you can enable the plugin manually.",
          "type": "boolean",
          "scope": "resource",
          "default": false
        },
        "vitest.commandLine": {
          "markdownDescription": "The command line to start vitest tests. **It should have with the ability to append extra arguments**. For example `npx vitest` or `yarn test --`\n\nThis is a workspace setting. Do not change it in the user setting directly, which will affect all the projects you open",
          "type": "string",
          "scope": "resource",
          "default": ""
        },
        "vitest.configFile": {
          "markdownDescription": "Name or path to the config file, defaults to `./vite.config.ts`",
          "type": "string",
          "default": [
            "./vite.config.ts"
          ],
          "scope": "resource"
        },
        "vitest.include": {
          "markdownDescription": "Include glob for test files. Default: `[\"**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}\"]`",
          "type": "array",
          "default": [
            "**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}"
          ],
          "scope": "resource"
        },
        "vitest.exclude": {
          "markdownDescription": "Exclude globs for test files. \nDefault: `[\"**/node_modules/**\", \"**/dist/**\", \"**/cypress/**\", \"**/.{idea,git,cache,output,temp}/**\"]`",
          "type": "array",
          "default": [
            "**/node_modules/**",
            "**/dist/**",
            "**/cypress/**",
            "**/.{idea,git,cache,output,temp}/**"
          ],
          "scope": "resource"
        },
        "vitest.nodeEnv": {
          "markdownDescription": "The env passed to runner process in addition to `process.env`",
          "type": [
            "object",
            "null"
          ],
          "default": null,
          "scope": "machine"
        },
        "vitest.showFailMessages": {
          "description": "Get instant feedback when using Watch Mode. Pop-ups an error when a test fails.",
          "type": "boolean",
          "scope": "resource",
          "default": false
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "yarn run compile",
    "compile": "tsup ./src/extension.ts --external vscode --minify",
    "watch": "tsup ./src/extension.ts --external vscode --watch --sourcemap",
    "pretest": "yarn run compile && yarn run lint",
    "test": "node ./out/test/runTest.js",
    "test:pure": "vitest run",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix"
  },
  "dependencies": {},
  "devDependencies": {
    "@antfu/eslint-config": "^0.23.1",
    "@babel/parser": "^7.17.3",
    "@babel/types": "^7.17.0",
    "@rauschma/stringio": "^1.4.0",
    "@types/fs-extra": "^9.0.13",
    "@types/glob": "^7.2.0",
    "@types/node": "14.x",
    "@types/semver": "^7.3.9",
    "@types/stack-utils": "^2.0.1",
    "@types/vscode": "^1.63.0",
    "@types/ws": "^8.5.3",
    "@typescript-eslint/eslint-plugin": "^5.12.1",
    "@typescript-eslint/parser": "^5.12.1",
    "@vitest/ws-client": "^0.12.6",
    "@vscode/test-electron": "^2.1.2",
    "@vue/reactivity": "^3.2.33",
    "@vueuse/core": "^8.4.2",
    "eslint": "^8.9.0",
    "fs-extra": "^10.0.1",
    "fuse.js": "^6.6.2",
    "get-port": "^6.1.2",
    "glob": "^7.2.0",
    "mighty-promise": "^0.0.8",
    "minimatch": "^3.1.1",
    "mocha": "^9.2.1",
    "prettier": "^2.5.1",
    "semver": "^7.3.5",
    "stack-utils": "^2.0.5",
    "tsup": "^5.12.7",
    "typescript": "^4.5.5",
    "vite": "^2.8.6",
    "vitest": "latest",
    "ws": "^8.6.0"
  },
  "lint-staged": {
    "*.{js,ts,tsx,vue,md}": [
      "eslint --fix"
    ]
  }
}
